{"version":3,"sources":["../src/riffraff-artefact.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["const AWS = require('aws-sdk');\nconst exec = require('child_process').exec;\nconst fs = require('fs');\nconst path = require('path');\n\nconst ROOT = process.cwd();\nconst LEAD_DIR = ROOT + \"/target/riffraff\";\n\n\n/*\n * To be valid packageJson,json must at the very least have\n * a name and a cloudformation field.\n */\nconsole.log(\"Reading configuration from package.json\");\nconst packageJson = require(ROOT + \"/package.json\");\n\n\nconst PACKAGE_DIR = LEAD_DIR + \"/packages/\" + packageJson.name;\n\nfunction createDir(dirname) {\n    if(!fs.existsSync(dirname)) {\n        console.log(\"Creating directory \" + dirname);\n        fs.mkdirSync(dirname);\n    }\n}\n\nfunction clean() {\n    return new Promise((resolve, reject) => {\n        console.log(\"Cleaning target directory...\");\n        let result = (error) =>  {\n            if (error) {\n                console.log(\"Failed deleting with: \" + error.stack);\n                process.exit(1);\n            }\n            return resolve();\n        };\n\n        const commandString = [\"rm -rf\", LEAD_DIR + \"/*\"].join(\" \");\n        exec(commandString, result);\n    });\n}\n\nfunction copyFile(source, target) {\n    return new Promise((resolve, reject) => {\n        let result = (error) => {\n            if (error) {\n                console.log(\"Failed copying with: \" + error.stack);\n                process.exit(1);\n            }\n            return resolve(target);\n        };\n\n        const commandString = [\"cp\", source, target].join(\" \");\n        exec(commandString, result);\n    });\n}\n\n\nfunction s3Upload(file) {\n\n    const bucket = new AWS.S3({params: {name:\n                                      packageJson.bucket}});\n    const pieces = file.split('/');\n    const filename = pieces[pieces.length-1];\n\n    // build the bucket path\n    const path = [packageJson.name, packageJson.version, packageJson.name, filename].join(\"/\");\n\n    console.log(\"Uploading \" + path);\n\n    fs.readFile(file, function (err, data) {\n        const params = {\n            Bucket: packageJson.bucket,\n            Key: path,\n            Body: data\n        };\n\n        bucket.upload(params, function (err) {\n            if (err) {\n                console.log(\"Failed with error:\", err);\n                process.exit(1);\n            }\n            console.log(\"Uploaded file to \" + path);\n        });\n    });\n}\n\nfunction createTar() {\n    return new Promise((resolve, reject) => {\n        var target = PACKAGEJSON_DIR + '/' + packageJson.app + '.tgz';\n        console.log(\"Creating tgz in \" + target);\n\n        let result = (error) => {\n            if (error) {\n                console.log(\"Failed to create tar with: \" + error.stack);\n                process.exit(1);\n            }\n            console.log(\"Created tgz file in: \", target);\n            return resolve();\n        };\n\n        const commandString = [\"tar czf\", target, \"./*\"].join(\" \");\n        exec(commandString, result);\n\n    });\n}\n\nfunction createZip() {\n    // change directory to the target\n    process.chdir(LEAD_DIR);\n    return new Promise((resolve, reject) => {\n        const FILENAME = \"artifacts.zip\";\n\n        console.log(\"Creating zip in ./target/riffraff/\" + FILENAME);\n        let result = (error) => {\n            if (error) {\n                console.log(\"Failed to create zip with: \" + error.stack);\n                process.exit(1);\n            }\n            console.log(\"Created zip file in ./target/riffraff/\" + FILENAME);\n\n            return resolve(FILENAME);\n        };\n\n        const commandString = [\"zip -r\", FILENAME, \"./*\"].join(\" \");\n        exec(commandString, result);\n    });\n}\n\n\n\nfunction createDirectories() {\n    return new Promise((resolve, reject) => {\n        createDir(LEAD_DIR);\n        createDir(LEAD_DIR + \"/packages\");\n        createDir(LEAD_DIR + \"/packages/cloudformation\");\n        createDir(PACKAGE_DIR);\n        return resolve();\n    });\n}\n\nfunction cloudformation() {\n    return copyFile(packageJson.cloudformation,\n                    LEAD_DIR + '/packages/cloudformation/');\n}\n\nfunction deployJson() {\n    return copyFile(ROOT + \"/deploy.json\", LEAD_DIR);\n}\n\nfunction buildManifest() {\n    return {\n        projectName: packageJson.name\n    };\n}\n\n// run the processes\nclean()\n    .then(createDirectories)\n    .then(cloudformation)\n    .then(deployJson)\n    .then(createTar)\n    .then(createZip);\n"]}